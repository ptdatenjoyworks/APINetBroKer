// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APINetBorker.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231208101941_updateDatab")]
    partial class updateDatab
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("Core.Entities.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Contract.Contact", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "aaaa"
                        },
                        new
                        {
                            Id = 2,
                            Name = "bbbb"
                        },
                        new
                        {
                            Id = 3,
                            Name = "cccc"
                        },
                        new
                        {
                            Id = 4,
                            Name = "dddd"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ffff"
                        });
                });

            modelBuilder.Entity("Core.Entities.Contract.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BillingChargeType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BillingType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CloserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContactId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnrollmentType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FronterId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LegalEntityName")
                        .HasColumnType("TEXT");

                    b.Property<int>("PricingType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SoldDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stage")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CloserId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FronterId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingChargeType = 1,
                            BillingType = 1,
                            CloserId = 1,
                            ContactId = 1,
                            CustomerId = 1,
                            EnrollmentType = 1,
                            FronterId = 1,
                            IsActive = true,
                            LegalEntityName = "John A",
                            PricingType = 1,
                            SoldDate = new DateTime(2023, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stage = 0,
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            BillingChargeType = 1,
                            BillingType = 1,
                            CloserId = 2,
                            ContactId = 1,
                            CustomerId = 1,
                            EnrollmentType = 1,
                            FronterId = 2,
                            IsActive = true,
                            LegalEntityName = "Jelly B",
                            PricingType = 1,
                            SoldDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Stage = 0,
                            SupplierId = 2
                        });
                });

            modelBuilder.Entity("Core.Entities.Contract.ContractItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<decimal?>("Adder")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AnnualUsage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContractsId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EnergyUnitType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ForecastState")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProductType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SaleProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SalesProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TermMonth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UtilityAccountNumber")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContractsId");

                    b.HasIndex("SalesProgramId");

                    b.ToTable("ContractItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adder = 0.0075m,
                            AnnualUsage = 58398,
                            ContractsId = 1,
                            EndDate = new DateTime(2025, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = 4,
                            ForecastState = 0,
                            IsActive = true,
                            ProductType = 1,
                            Rate = 0.01275m,
                            StartDate = new DateTime(2023, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TermMonth = 24,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 2,
                            Adder = 0.073m,
                            AnnualUsage = 12303,
                            ContractsId = 1,
                            EndDate = new DateTime(2024, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = 1,
                            ForecastState = 0,
                            IsActive = true,
                            ProductType = 2,
                            Rate = 0.2275m,
                            StartDate = new DateTime(2023, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TermMonth = 16,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 3,
                            Adder = 6.3m,
                            AnnualUsage = 835,
                            ContractsId = 1,
                            EndDate = new DateTime(2024, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = 5,
                            ForecastState = 0,
                            IsActive = true,
                            ProductType = 1,
                            Rate = 23m,
                            StartDate = new DateTime(2023, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TermMonth = 12,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 4,
                            Adder = 0.0073m,
                            AnnualUsage = 160880,
                            ContractsId = 1,
                            EndDate = new DateTime(2024, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = 4,
                            ForecastState = 0,
                            IsActive = true,
                            ProductType = 1,
                            Rate = 0.02275m,
                            StartDate = new DateTime(2023, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TermMonth = 15,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 5,
                            Adder = 0.083m,
                            AnnualUsage = 89340,
                            ContractsId = 1,
                            EndDate = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = 2,
                            ForecastState = 0,
                            IsActive = true,
                            ProductType = 2,
                            Rate = 0.3275m,
                            StartDate = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TermMonth = 12,
                            UtilityAccountNumber = "9138014006"
                        },
                        new
                        {
                            Id = 6,
                            Adder = 0.003m,
                            AnnualUsage = 36000,
                            ContractsId = 2,
                            EndDate = new DateTime(2024, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = 4,
                            ForecastState = 0,
                            IsActive = true,
                            ProductType = 1,
                            Rate = 0.0225m,
                            StartDate = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TermMonth = 17,
                            UtilityAccountNumber = "177478640021"
                        },
                        new
                        {
                            Id = 7,
                            Adder = 0.073m,
                            AnnualUsage = 4200,
                            ContractsId = 2,
                            EndDate = new DateTime(2024, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = 3,
                            ForecastState = 0,
                            IsActive = true,
                            ProductType = 2,
                            Rate = 2.275m,
                            StartDate = new DateTime(2023, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TermMonth = 14,
                            UtilityAccountNumber = "177478640021"
                        },
                        new
                        {
                            Id = 8,
                            Adder = 5.32m,
                            AnnualUsage = 1500,
                            ContractsId = 2,
                            EndDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = 5,
                            ForecastState = 0,
                            IsActive = true,
                            ProductType = 1,
                            Rate = 20.75m,
                            StartDate = new DateTime(2023, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TermMonth = 16,
                            UtilityAccountNumber = "177478640021"
                        },
                        new
                        {
                            Id = 9,
                            Adder = 0.053m,
                            AnnualUsage = 60000,
                            ContractsId = 2,
                            EndDate = new DateTime(2024, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = 1,
                            ForecastState = 0,
                            IsActive = true,
                            ProductType = 2,
                            Rate = 0.1275m,
                            StartDate = new DateTime(2023, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TermMonth = 18,
                            UtilityAccountNumber = "177478640021"
                        },
                        new
                        {
                            Id = 10,
                            Adder = 0.0033m,
                            AnnualUsage = 15000,
                            ContractsId = 2,
                            EndDate = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnergyUnitType = 4,
                            ForecastState = 0,
                            IsActive = true,
                            ProductType = 1,
                            Rate = 0.04275m,
                            StartDate = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1,
                            TermMonth = 15,
                            UtilityAccountNumber = "177478640021"
                        });
                });

            modelBuilder.Entity("Core.Entities.Contract.ContractItemAttchment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("ContractItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ContractItemId");

                    b.ToTable("ContractItemAttchment");
                });

            modelBuilder.Entity("Core.Entities.Contract.Customer", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "aaa"
                        },
                        new
                        {
                            Id = 2,
                            Name = "bbb"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ccc"
                        },
                        new
                        {
                            Id = 4,
                            Name = "ddd"
                        },
                        new
                        {
                            Id = 5,
                            Name = "fff"
                        });
                });

            modelBuilder.Entity("Core.Entities.Contract.Supplier", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "a"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "b"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "c"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Name = "d"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Name = "e"
                        });
                });

            modelBuilder.Entity("Core.Entities.Contract.SupplierDeposit", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierDeposits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1m,
                            PaymentDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 2m,
                            PaymentDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 3,
                            Amount = 3m,
                            PaymentDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 4,
                            Amount = 4m,
                            PaymentDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 4
                        },
                        new
                        {
                            Id = 5,
                            Amount = 5m,
                            PaymentDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierId = 5
                        });
                });

            modelBuilder.Entity("Core.Entities.Sales.Commision", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("CommissionConfigurationTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MarginPercent")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ProgramAdder")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProgramAdderType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SalesProgramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SalesProgramId");

                    b.ToTable("Commisions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Commision");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Entities.Sales.DateConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int?>("CommisionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ControlDateModifierType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ControlDateOffsetType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ControlDateOffsetValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ControlDateType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CommisionId")
                        .IsUnique();

                    b.ToTable("DateConfigs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommisionId = 1,
                            ControlDateModifierType = 0,
                            ControlDateOffsetType = 1,
                            ControlDateOffsetValue = 2,
                            ControlDateType = 1
                        },
                        new
                        {
                            Id = 2,
                            CommisionId = 2,
                            ControlDateModifierType = 0,
                            ControlDateOffsetType = 0,
                            ControlDateOffsetValue = 0,
                            ControlDateType = 1
                        },
                        new
                        {
                            Id = 3,
                            CommisionId = 3,
                            ControlDateModifierType = 0,
                            ControlDateOffsetType = 0,
                            ControlDateOffsetValue = 0,
                            ControlDateType = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Sales.Qualification", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SalesProgramId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SalesProgramId");

                    b.ToTable("Qualifications");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Qualification");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.Entities.Sales.SalesProgram", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnergyUnitType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SalesProgramType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SalePrograms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "50% contract upfront then residual",
                            EnergyUnitType = 4,
                            SalesProgramType = "PercentageContractUpfront + PercentageContractResidual"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Forecast annual margin divided by four",
                            EnergyUnitType = 2,
                            SalesProgramType = "QuarterlyUpfront"
                        });
                });

            modelBuilder.Entity("Core.Entities.User.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasComment("Maximum length for the full name is 255 characters");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "DN",
                            BirthDay = new DateTime(2023, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "4794fa3e-f025-4b3f-b909-d232335c1e90",
                            DateCreated = new DateTime(2023, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FullName = "MrDat",
                            IsActive = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            BirthDay = new DateTime(2023, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c7bb4d73-4e74-4096-9c06-96bcfbea0d6e",
                            DateCreated = new DateTime(2023, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FullName = "MrD",
                            IsActive = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "HN",
                            BirthDay = new DateTime(2023, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "23269c17-40b6-496a-9417-217a2c7b158d",
                            DateCreated = new DateTime(2023, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FullName = "MrB",
                            IsActive = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "QN",
                            BirthDay = new DateTime(2023, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6565fbee-fb7c-4539-b9f2-605b9268236a",
                            DateCreated = new DateTime(2023, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FullName = "MrC",
                            IsActive = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "HT",
                            BirthDay = new DateTime(2023, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f5eb4ff3-4b9e-42cc-add9-ff0bc830c388",
                            DateCreated = new DateTime(2023, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailConfirmed = false,
                            FullName = "MrD",
                            IsActive = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Sales.ContractUpfront", b =>
                {
                    b.HasBaseType("Core.Entities.Sales.Commision");

                    b.HasDiscriminator().HasValue("ContractUpfront");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommissionConfigurationTypeId = "ContractUpfront",
                            MarginPercent = 0.5m,
                            ProgramAdder = 0.007m,
                            ProgramAdderType = 1,
                            SalesProgramId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Sales.PercentageContractResidual", b =>
                {
                    b.HasBaseType("Core.Entities.Sales.Commision");

                    b.HasDiscriminator().HasValue("PercentageContractResidual");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CommissionConfigurationTypeId = "ContractUpfront",
                            MarginPercent = 0.5m,
                            ProgramAdder = 0.007m,
                            ProgramAdderType = 1,
                            SalesProgramId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Sales.QuarterlyUpfront", b =>
                {
                    b.HasBaseType("Core.Entities.Sales.Commision");

                    b.HasDiscriminator().HasValue("QuarterlyUpfront");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            CommissionConfigurationTypeId = "ContractUpfront",
                            MarginPercent = 0.5m,
                            ProgramAdder = 0.007m,
                            ProgramAdderType = 1,
                            SalesProgramId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Sales.QualificationAnnualUsage", b =>
                {
                    b.HasBaseType("Core.Entities.Sales.Qualification");

                    b.Property<int?>("FromAnnualUsage")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ToAnnualUsage")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("QualificationAnnualUsage");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            SalesProgramId = 2,
                            FromAnnualUsage = 50000,
                            ToAnnualUsage = 100000
                        });
                });

            modelBuilder.Entity("Core.Entities.Sales.QualificationDate", b =>
                {
                    b.HasBaseType("Core.Entities.Sales.Qualification");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("QualificationDate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SalesProgramId = 1,
                            EffectiveDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiryDate = new DateTime(2199, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            SalesProgramId = 2,
                            EffectiveDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExpiryDate = new DateTime(2023, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Core.Entities.Contract.Contract", b =>
                {
                    b.HasOne("Core.Entities.User.ApplicationUser", null)
                        .WithMany("Contracts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Core.Entities.User.ApplicationUser", "Closer")
                        .WithMany()
                        .HasForeignKey("CloserId");

                    b.HasOne("Core.Entities.Contract.Contact", "Contact")
                        .WithMany("Contracts")
                        .HasForeignKey("ContactId");

                    b.HasOne("Core.Entities.Contract.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Core.Entities.User.ApplicationUser", "Fronter")
                        .WithMany()
                        .HasForeignKey("FronterId");

                    b.HasOne("Core.Entities.Contract.Supplier", "Supplier")
                        .WithMany("Contracts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Closer");

                    b.Navigation("Contact");

                    b.Navigation("Customer");

                    b.Navigation("Fronter");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Core.Entities.Contract.ContractItem", b =>
                {
                    b.HasOne("Core.Entities.Contract.Contract", "Contracts")
                        .WithMany("ContractItems")
                        .HasForeignKey("ContractsId");

                    b.HasOne("Core.Entities.Sales.SalesProgram", "SalesProgram")
                        .WithMany()
                        .HasForeignKey("SalesProgramId");

                    b.Navigation("Contracts");

                    b.Navigation("SalesProgram");
                });

            modelBuilder.Entity("Core.Entities.Contract.ContractItemAttchment", b =>
                {
                    b.HasOne("Core.Entities.Contract.ContractItem", "ContractItem")
                        .WithMany("Attachments")
                        .HasForeignKey("ContractItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractItem");
                });

            modelBuilder.Entity("Core.Entities.Contract.SupplierDeposit", b =>
                {
                    b.HasOne("Core.Entities.Contract.Supplier", "Suppliers")
                        .WithMany("SupplierDeposits")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Core.Entities.Sales.Commision", b =>
                {
                    b.HasOne("Core.Entities.Sales.SalesProgram", "SalesProgram")
                        .WithMany("Commisions")
                        .HasForeignKey("SalesProgramId");

                    b.Navigation("SalesProgram");
                });

            modelBuilder.Entity("Core.Entities.Sales.DateConfig", b =>
                {
                    b.HasOne("Core.Entities.Sales.Commision", "Commision")
                        .WithOne("DateConfig")
                        .HasForeignKey("Core.Entities.Sales.DateConfig", "CommisionId");

                    b.Navigation("Commision");
                });

            modelBuilder.Entity("Core.Entities.Sales.Qualification", b =>
                {
                    b.HasOne("Core.Entities.Sales.SalesProgram", "SalesProgram")
                        .WithMany("Qualifications")
                        .HasForeignKey("SalesProgramId");

                    b.Navigation("SalesProgram");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Core.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Core.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Core.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Core.Entities.User.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.Contract.Contact", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Core.Entities.Contract.Contract", b =>
                {
                    b.Navigation("ContractItems");
                });

            modelBuilder.Entity("Core.Entities.Contract.ContractItem", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Core.Entities.Contract.Customer", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Core.Entities.Contract.Supplier", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("SupplierDeposits");
                });

            modelBuilder.Entity("Core.Entities.Sales.Commision", b =>
                {
                    b.Navigation("DateConfig");
                });

            modelBuilder.Entity("Core.Entities.Sales.SalesProgram", b =>
                {
                    b.Navigation("Commisions");

                    b.Navigation("Qualifications");
                });

            modelBuilder.Entity("Core.Entities.User.ApplicationUser", b =>
                {
                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
